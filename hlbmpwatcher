#!/usr/bin/python3

import argparse
import logging
import os
import re
import sys
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from PIL import Image

if sys.platform == 'win32':
    import winreg

def read_reg_str(ep, p = r"", k = ''):
    try:
        key = winreg.OpenKeyEx(ep, p)
        value = winreg.QueryValueEx(key,k)
        if key:
            winreg.CloseKey(key)
        return str(value[0])
    except Exception as e:
        return None
    return None

def get_main_steam_path():
    if sys.platform == 'win32':
        steam_path = read_reg_str(ep = winreg.HKEY_LOCAL_MACHINE, p = r"SOFTWARE\Wow6432Node\Valve\Steam", k = 'InstallPath')
        if steam_path is None or not os.path.exists(steam_path):
            steam_path = read_reg_str(ep = winreg.HKEY_LOCAL_MACHINE, p = r"SOFTWARE\Valve\Steam", k = 'InstallPath')
        return steam_path
    else:
        home_directory = os.path.expanduser('~')
        steam_path = os.path.join( home_directory, '.steam', 'steam')
        return steam_path
    return None

def get_halflife_path(steam_storage_paths):
    for storage_path in steam_storage_paths:
        apps_path = os.path.join(storage_path, 'steamapps', 'common')
        hl_path = os.path.join(apps_path, 'Half-Life')
        if os.path.isdir(hl_path):
            return hl_path
    return None

def get_svencoop_path(steam_storage_paths):
    for storage_path in steam_storage_paths:
        apps_path = os.path.join(storage_path, 'steamapps', 'common')
        sven_path = os.path.join(apps_path, 'Sven Co-op')
        if os.path.isdir(sven_path):
            return sven_path
    return None

def screenshot_folders_from_storage_paths(steam_storage_paths):
    paths = []

    hl_path = get_halflife_path(steam_storage_paths)
    if hl_path is not None:
        for subitem in os.listdir(hl_path):
            possible_mod_path = os.path.join(hl_path, subitem)
            if os.path.isdir(possible_mod_path):
                liblist_path = os.path.join(possible_mod_path, 'liblist.gam')
                if os.path.isfile(liblist_path):
                    paths.append(possible_mod_path)

    sven_path = get_svencoop_path(steam_storage_paths)
    if sven_path is not None:
        sven_screenshots_path = os.path.join(sven_path, 'svencoop', 'screenshots')
        if os.path.isdir(sven_screenshots_path):
            paths.append(sven_screenshots_path)

    return paths

def get_steam_storage_paths(main_steam_path):
    storage_paths = []

    libraryfolders_path = os.path.join(main_steam_path, 'steamapps', 'libraryfolders.vdf')
    try:
        with open(libraryfolders_path, 'r') as libraryfolders_file:
            regex = re.compile(r'\s*"path"\s*"(.+)"')
            for line in libraryfolders_file.readlines():
                result = regex.match(line)
                if result:
                    storage_path = result.group(1)
                    if os.path.isdir(storage_path):
                        storage_paths.append(os.path.normpath(storage_path))
    except Error:
        pass
    if len(storage_paths) == 0:
        storage_paths.append(main_steam_path)
    return storage_paths

def convert_to_png(img_path):
    # error thrown if bmp file is not fully written yet
    truncated_error_regex = re.compile('image file is truncated')

    basepath, ext = os.path.splitext(img_path)
    try:
        with Image.open(img_path) as im:
            png_path = basepath + '.png'
            if not os.path.exists(png_path):
                im.save(png_path)
                logging.info("Converted '%s' to '%s' in '%s'", os.path.basename(img_path), os.path.basename(png_path), os.path.dirname(img_path))
    except OSError as err:
        errstr = str(err)
        if truncated_error_regex.search(errstr) is None:
            logging.error("Cannot convert '%s' to PNG: %s", img_path, str(err))

class ScreenshotHandler(FileSystemEventHandler):
    @staticmethod
    def on_modified(event):
        if event.is_directory:
            return None
        elif event.event_type == 'modified' and event.src_path.endswith('.bmp'):
            img_path = event.src_path
            convert_to_png(img_path)

class ModfolderHandler(FileSystemEventHandler):
    def __init__(self, observer, modwatches):
        super().__init__()
        self.observer = observer
        self.modwatches = modwatches
    def on_created(self, event):
        if not event.is_directory:
            return None
        logging.info("Starting observing new directory: %s", event.src_path)
        modwatches[event.src_path] = observer.schedule(ScreenshotHandler(), event.src_path, recursive=False)
    def on_deleted(self, event):
        if not event.is_directory:
            return None
        if event.src_path in modwatches:
            logging.info("Removing directory from the watch list because it was deleted: %s", event.src_path)
            observer.unschedule(modwatches[event.src_path])
            del modwatches[event.src_path]
    def on_moved(self, event):
        if not event.is_directory:
            return None
        if event.src_path in modwatches:
            logging.info("The directory renamed from '%s' to '%s'. Updating the watch.", event.src_path, event.dest_path)
            observer.unschedule(modwatches[event.src_path])
            del modwatches[event.src_path]
            modwatches[event.dest_path] = observer.schedule(ScreenshotHandler(), event.dest_path, recursive=False)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(message)s')

    arg_parser = argparse.ArgumentParser(
                    prog='Half-Life BMP watcher',
                    description='Automatically convert newly taken Half-Life screenshots from BMP to PNG')
    arg_parser.add_argument('extra_paths', type=str, nargs='*', help='additional paths to watch for BMP files')
    arg_parser.add_argument('--no-autodetect', action='store_true', help="don't autodetect Steam Half-Life and Sven Co-op screenshot paths")
    arg_parser.add_argument('--dry-run', action='store_true', help="don't start observation, don't convert images, just print observed paths")
    arg_parser.add_argument('--no-watch', action='store_true', help="don't start observation, print observed paths and convert existing bmp files if --convert-existing option is provided")
    arg_parser.add_argument('--convert-existing', action='store_true', help="convert already existing bmp screenshots at the hlbmpwatcher startup")
    args = arg_parser.parse_args()

    autodetected_paths = []
    hl_path = None
    main_steam_path = None

    if not args.no_autodetect:
        main_steam_path = get_main_steam_path()
        if main_steam_path is None:
            print("Couldn't detect steam main path")
        elif not os.path.isdir(main_steam_path):
            print("Directory '%s' doesn't exist" % main_steam_path)
        else:
            steam_storage_paths = get_steam_storage_paths(main_steam_path)
            hl_path = get_halflife_path(steam_storage_paths)
            autodetected_paths = screenshot_folders_from_storage_paths(steam_storage_paths)

    screenshot_paths = autodetected_paths
    extra_paths = []
    for path in args.extra_paths:
        if os.path.isdir(path):
            extra_paths.append(path)
        else:
            print("'%s' is not an existing directory." % path)
    screenshot_paths.extend(set(extra_paths))

    if len(screenshot_paths) == 0:
        print("Nothing to do. Directories are not provided or do not exists. Exiting...")
        sys.exit()

    should_observe = not (args.no_watch or args.dry_run)

    if hl_path is not None:
        if should_observe:
            print("Observing Half-Life directory for mod folders:")
        else:
            print("Half-Life directory:")
        print("\t%s" % hl_path)

    if should_observe:
        print("Observing screenshot directories:")
    else:
        print("Screenshot directories:")
    for path in screenshot_paths:
        print("\t%s" % path)

    if args.convert_existing:
        bmp_screenshot_re = re.compile(r"[0-9]{4}\.bmp")
        for path in screenshot_paths:
            for f in os.listdir(path):
                img_path = os.path.join(path, f)
                if bmp_screenshot_re.search(img_path) is not None:
                    if args.dry_run:
                        logging.info("Would convert '%s' to PNG", img_path)
                    else:
                        convert_to_png(img_path)

    if args.no_watch or args.dry_run:
        sys.exit()

    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')

    screenshot_handler = ScreenshotHandler()
    observer = Observer()
    modwatches = dict()

    for path in screenshot_paths:
        modwatches[path] =  observer.schedule(screenshot_handler, path, recursive=False)

    modfolder_handler = ModfolderHandler(observer, modwatches)

    if hl_path is not None:
        observer.schedule(modfolder_handler, hl_path, recursive=False)

    observer.start()
    try:
        try:
            while observer.is_alive():
                observer.join(1)
        except TypeError:
            # support old versions
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            # just stop the loop
            pass
    finally:
        observer.stop()
        observer.join()
